# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Block {
  archived: Boolean!
  created_by: JSONObject
  created_time: String!
  has_children: Boolean!
  id: String!
  image: JSONObject
  last_edited_by: JSONObject
  last_edited_time: String!
  object: String!
  paragraph: JSONObject
  parent: JSONObject
  type: String!
}

type Blocks {
  has_more: Boolean!
  next_cursor: JSONObject
  object: String!
  results: [Block!]!
  type: String!
}

type Comment {
  created_by: JSONObject
  created_time: String!
  discussion_id: String!
  id: String!
  last_edited_by: JSONObject
  last_edited_time: String!
  object: String!
  parent: JSONObject
  rich_text: [NormalText!]!
}

type Comments {
  has_more: Boolean!
  next_cursor: JSONObject
  object: String!
  results: [Comment!]!
  type: String!
}

type ConfigProperties {
  id: String
  object: String
}

input ConfigPropertiesInput {
  """Configuration"""
  configuration: String!

  """Database Id"""
  databaseId: String!
}

type ConfigPropertiesRelation {
  id: String
  object: String
}

input ConfigPropertiesRelationInput {
  """Configuration"""
  configuration: String!

  """Relation Id"""
  relationId: String!

  """Relation Name"""
  relationName: String!
}

type CreateComment {
  id: String!
  object: String!
}

input CreateCommentInput {
  """Comment"""
  comment: String!

  """Discussion Thread Id"""
  discussionId: String

  """Page Id"""
  pageId: String!
}

input CreateDatabaseInput {
  description: [RichText!]
  parent: Parent!
  properties: JSON!
  title: [RichText!]!
}

input CreateRecordInput {
  """Properties value input"""
  properties: JSONObject!

  """Relation Id as Database Id"""
  relationId: String!
}

type CreateRecordResult {
  id: String!
  properties: JSON
}

input CreateRelationInput {
  """Relation Name"""
  name: String!

  """Page Id as User Id"""
  pageId: String!

  """Relation Properties"""
  properties: [RelationPropertyInput!]!
}

type CreateRelationResult {
  id: String!
  properties: JSON
}

type Database {
  archived: Boolean!
  cover: JSONObject
  created_by: JSONObject!
  created_time: String!
  description: [NormalText!]!
  icon: JSONObject

  """db id with hyphen"""
  id: String!
  is_inline: Boolean!
  last_edited_by: JSONObject
  last_edited_time: String!
  object: String!
  parent: JSONObject!
  properties: JSONObject!
  title: [NormalText!]!
  url: String!
}

type DatabaseResponse {
  object: String!
  results: [Database!]!
}

type DatabaseUser {
  archived: Boolean
  cover: JSONObject
  created_by: JSONObject
  created_time: String
  icon: JSONObject
  id: String!
  last_edited_by: JSONObject
  last_edited_time: String
  object: String!
  parent: JSONObject
  properties: JSONObject
  url: String
}

type DatabaseUsers {
  has_more: Boolean!
  next_cursor: String
  object: String!
  results: [DatabaseUser!]!
  type: String!
  user: JSONObject
}

input Filter {
  property: String!
  value: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type ListRelationsResult {
  relations: [RelationResult!]!
}

type Mutation {
  addRecordToRelation(createRecordInput: CreateRecordInput!): CreateRecordResult!
  configProperties(configPropertiesInput: ConfigPropertiesInput!): ConfigProperties!
  configPropertiesRelation(configPropertiesRelationInput: ConfigPropertiesRelationInput!): ConfigPropertiesRelation!
  createComment(createCommentInput: CreateCommentInput!): CreateComment!
  createRelation(createRelationInput: CreateRelationInput!): CreateRelationResult!

  """
  Create one database, more detail in https://developers.notion.com/reference/create-a-database
  """
  create_database(createDatabaseInput: CreateDatabaseInput!): Database!
  deleteRecordToRelation(recordId: String!): UpdateRecordResult!
  signIn(signInUserInput: SignInUserInput!): SignInUserResult!
  signInV2(signInUserInput: SignInUserV2Input!): SignInUserV2Result!
  signUp(signUpUserInput: SignUpUserInput!): SignUpUserResult!
  signUpV2(signUpUserInput: SignUpUserV2Input!): SignUpUserV2Result!
  updateRecordToRelation(updateRecordInput: UpdateRecordInput!): UpdateRecordResult!

  """
  It changes database column, more info at https://developers.notion.com/reference/update-a-database
  """
  update_database(updateDatabaseInput: UpdateDatabaseInput!): Database!
  verifyUser(verifyUser: VerifyUserV2Input!): VerifyUserV2Result!
}

type NormalText {
  annotations: JSONObject
  href: String
  plain_text: String!
  text: JSONObject
  type: String!
}

type NotionObjectResponse {
  archived: Boolean
  created_by: JSONObject
  created_time: String
  id: String
  last_edited_by: JSONObject
  last_edited_time: String
  object: String
  parent: JSONObject
  properties: JSONObject
}

type Page {
  archived: Boolean!
  cover: JSONObject
  created_by: JSONObject
  created_time: String!
  icon: JSONObject
  id: String!
  last_edited_by: JSONObject
  last_edited_time: String!
  object: String!
  parent: JSONObject
  properties: JSONObject
  url: String!
}

type PageDetail {
  blocks: Blocks!
  page: Page!
}

type Pages {
  has_more: Boolean!
  next_cursor: JSONObject
  object: String!
  results: [Page!]!
  type: String!
}

input Parent {
  page_id: String!
  type: String!
}

type PropertiesConfigRelation {
  configuration: NotionObjectResponse!
  property_details: JSONObject!
  property_names: [String!]!
}

type PropertiesConfiguration {
  archived: Boolean
  created_by: JSONObject
  created_time: String
  id: String
  last_edited_by: JSONObject
  last_edited_time: String
  object: String
  parent: JSONObject
  properties: JSONObject
}

type Query {
  comments(blockId: String!): Comments!

  """List all databases are added to integration"""
  databases: DatabaseResponse!

  """Get properties of one db that can adding"""
  getAddProperties(databaseId: String!): Database!

  """Get Page Detail of one db"""
  getDetailPageOfDatabase(databaseId: String!, pageId: String!): Page!
  getInfoRecordOfRelation(recordId: String!): Record!
  getListRecordsOfRelation(relationId: String!): RecordsResult!
  getListRelationsOfUser(userId: String!): ListRelationsResult!
  getPropertiesConfigOfRelation(relationId: String!): PropertiesConfigRelation!
  getPropertiesConfiguration(databaseId: String!): PropertiesConfiguration!
  getUserById(id: String!): DatabaseUser!

  """Get data of one db"""
  one_database(id: String!): DatabaseResponse!
  pageByIdAndBlocks(id: String!): PageDetail!
  pages: Pages!

  """Get context of one database like title, cover, header name, etc..."""
  retrieve_database(id: String!): Database!

  """Search databases and pages"""
  search(searchInput: SearchInput!): SearchResponse!
  users: DatabaseUsers!
}

type Record {
  archived: Boolean!
  cover: JSONObject
  created_by: JSONObject!
  created_time: String!
  icon: JSONObject

  """db id with hyphen"""
  id: String!
  last_edited_by: JSONObject
  last_edited_time: String!
  object: String!
  parent: JSONObject!
  properties: JSONObject!
  url: String!
}

type RecordsResult {
  has_more: Boolean
  object: String!
  results: [Record!]!
}

input RelationPropertyInput {
  """Property Name"""
  name: String!

  """Property Type"""
  type: String
}

type RelationResult {
  color: String
  id: String
  name: String
}

input RichText {
  text: Text!
  type: String
}

input SearchInput {
  filter: Filter
  query: String!
  sort: Sort
}

type SearchResponse {
  object: String!
  results: [SearchResult!]!
}

type SearchResult {
  archived: Boolean!
  cover: JSONObject
  created_by: JSONObject!
  created_time: String!
  description: [NormalText!]
  icon: JSONObject

  """db id with hyphen"""
  id: String!
  is_inline: Boolean!
  last_edited_by: JSONObject
  last_edited_time: String!
  object: String!
  parent: JSONObject!
  properties: JSONObject!
  title: [NormalText!]
  url: String!
}

input SignInUserInput {
  """User Name"""
  userName: String!
}

type SignInUserResult {
  accessToken: String!
}

input SignInUserV2Input {
  """Email"""
  email: String!

  """Password"""
  password: String!
}

type SignInUserV2Result {
  accessToken: String!
  id: String!
}

input SignUpUserInput {
  """Integrating Secret"""
  secretKey: String!

  """User Name"""
  userName: String!
}

type SignUpUserResult {
  accessToken: String!
  id: String!
  object: String!
}

input SignUpUserV2Input {
  """Email"""
  email: String!

  """Password"""
  password: String!
}

type SignUpUserV2Result {
  success: Boolean!
}

input Sort {
  direction: String!
  timestamp: String!
}

input Text {
  content: String!
  link: String
}

input UpdateDatabaseInput {
  description: [RichText!]
  id: String!
  properties: JSON!
  title: [RichText!]!
}

input UpdateRecordInput {
  """Properties value input"""
  properties: JSONObject!

  """Record Id as Page Id"""
  recordId: String!
}

type UpdateRecordResult {
  id: String!
  properties: JSON
}

input VerifyUserV2Input {
  """Code"""
  code: String!

  """Email"""
  email: String!
}

type VerifyUserV2Result {
  id: String!
  object: String!
}